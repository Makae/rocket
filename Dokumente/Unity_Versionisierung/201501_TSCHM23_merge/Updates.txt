Was wurde verändert?
---------------------
Files: Menu_Main
-----------------
- Menü hinzugefügt. Als Prefab importieren, Neue Szene erstellen, Maincamera löschen, Prefab "Menu_Main" in die Hierarchy ziehen, GameController Prefab in die Hierarchy Ziehen
 fertig

Files: Bomb_box importieren.
- Bomb_box hat ein Mesh Collider
- Patrol ist auf der richtigen höhe

File: EnemyAI.cs
---------------
1. Patrol - Punkte werden jetzt beim initialisieren in der richtigen menge und Reihenfolge geladen, getaggt sind die Patrol Punkte mit "Patrol_1"



File: Patrol_1.unitypackage
-------------
Die Patrol hier wie von schwf5 beschrieben ins level1.unity Scene importieren. Diese Objekte sind mit Patrol_1 getagged und können so von EnemyAi gefunden werden


File: Menu_Main.unitypackage
----------
Menu_Main.unitypackage unter Prefabs via Import einbinden, beschreibung von Fäbu verwenden wenn unklar,
Menu einbinden:
Existiert eine Scene noch nicht, neue Szene erstellen, z.B. Menu_Main Prefab reinziehen, das GameController Prefab reinziehen und die Szene als "Menu_Main" abspeichern.

Es werden folgende Scene erwartet. Das hauptlevel ist level1,
die Menüpunkte sind selbsterklärend.


		Application.LoadLevel("level1"); // ist das Eigentliche Level, welches geladen wird.

		Application.LoadLevel("Menu_Main"); // ist das hauptmenu


		Einfach unter "File - Build Settings... " die Szene "Menu_Main" einbindne.


Dazu auch die Scripts changeMenu.js, GameMenu.js und RestartLevel.cs ersetzen



File: Menu_Credits, Menu_Load, Menu_Options.
-------------------------------------------
Siehe File: Menu_Main.unitypackage, diese Prefabs auch importieren, neue Szene erstellen , hineinziehen, GameController auch reinziehen, unter richtigem Name Speichern.
		Application.LoadLevel("Menu_Credits");

		Application.LoadLevel("Menu_Options");

		Application.LoadLevel("Menu_Load");



		Enemy - 

		Die Grundidee ist, dass ein oder Mehrere Roboter dem Spieler während dem Spielen gefährlich werden können.
		Dabei sollen die Anzahl der Aktiven Roboter schnell und einfach erweitert werden können, ohne viel Code anzupassen.
		Der Roboter verfügt über dazu über unterschiedlichen "Routinen" wie zum Beispiel "Patrol" , "Recharging" oder "Chase".
		Weiter verfügt der Roboter über eine interne Batterie, die ihn am Laufen hält.
		Weiteres Konzept is die SIcht

			Sicht
			Jeder Gegner soll unabhängig vom Typ in der Lage sein, den Spieler in einem Gewissen Sichtradius zu orten.
			Dazu habe ich das Script "";


File: Screenfader.unitypackage
---------------------------------
File als Prefab importieren. Prefab aus der screenfader aus der Hierarchie löschen, prefab in Hierarchie ziehen.


File: Robot_2.unitypackage und Patrol_2.unitypackage Robot.cs Update
--------------------
Einfach prefabs Robot_2 und Patrol_2 reinziehen, RoboterAi.cs einbinden.
Darauf achten, dass die Waypoints von Patrol_2 auch mit "Patrol_2" getagged sind.
Die Türen von Raum A, B und C als NICHT Statisch markieren, und dann nochmal das Nav-Mesh baken. Dann sollte der Robot_2 auch seine beiden Wegpunkte finden.



File: Ordner HFSM vom 2015.01.05
--------------------
Ein in Assets/Robot/ den Ordner ersetzen mit diesem ordner


File: EnemyAI.cs   PathUtils.cs    EnemySight.cs ResetLevel.cs hfsm again
----------------------------------------------

